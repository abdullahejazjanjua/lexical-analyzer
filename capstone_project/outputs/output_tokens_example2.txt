Line: 0, Token: include ----> Keyword
Line: 0, Token: iostream ----> identifier
Line: 1, Token: include ----> Keyword
Line: 1, Token: string ----> Keyword
Line: 2, Token: define ----> identifier
Line: 2, Token: MAX ----> identifier
Line: 2, Token: 10 ----> integer
Line: 4, Token: using ----> Keyword
Line: 4, Token: namespace ----> Keyword
Line: 4, Token: std ----> Keyword
Line: 4, Token: ; ----> separator
Line: 8, Token: double ----> Keyword
Line: 8, Token: calculateArea ----> identifier
Line: 8, Token: ( ----> separator
Line: 8, Token: double ----> Keyword
Line: 8, Token: length ----> identifier
Line: 8, Token: , ----> separator
Line: 8, Token: double ----> Keyword
Line: 8, Token: width ----> identifier
Line: 8, Token: ) ----> separator
Line: 9, Token: { ----> separator
Line: 10, Token: return ----> Keyword
Line: 10, Token: length ----> identifier
Line: 10, Token:  *  ----> operator
Line: 10, Token: width ----> identifier
Line: 10, Token: ; ----> separator
Line: 11, Token: } ----> separator
Line: 13, Token: int ----> Keyword
Line: 13, Token: main ----> Keyword
Line: 13, Token: ( ----> separator
Line: 13, Token: ) ----> separator
Line: 14, Token: { ----> separator
Line: 15, Token: char ----> Keyword
Line: 15, Token: grade ----> identifier
Line: 15, Token:  =  ----> operator
Line: 15, Token: 'A' ----> char_literal
Line: 15, Token: ; ----> separator
Line: 16, Token: string ----> Keyword
Line: 16, Token: message ----> identifier
Line: 16, Token:  =  ----> operator
Line: 16, Token: "Hello World" ----> string
Line: 16, Token: ; ----> separator
Line: 17, Token: int ----> Keyword
Line: 17, Token: numbers ----> identifier
Line: 17, Token: [ ----> separator
Line: 17, Token: 5 ----> integer
Line: 17, Token: ] ----> separator
Line: 17, Token:  =  ----> operator
Line: 17, Token: { ----> separator
Line: 17, Token: 1 ----> integer
Line: 17, Token: , ----> separator
Line: 17, Token: 2 ----> integer
Line: 17, Token: , ----> separator
Line: 17, Token: 3 ----> integer
Line: 17, Token: , ----> separator
Line: 17, Token: 4 ----> integer
Line: 17, Token: , ----> separator
Line: 17, Token: 5 ----> integer
Line: 17, Token: } ----> separator
Line: 17, Token: ; ----> separator
Line: 19, Token: for ----> Keyword
Line: 19, Token: ( ----> separator
Line: 19, Token: int ----> Keyword
Line: 19, Token: i ----> identifier
Line: 19, Token:  =  ----> operator
Line: 19, Token: 0 ----> integer
Line: 19, Token: ; ----> separator
Line: 19, Token: i ----> identifier
Line: 19, Token:  <  ----> operator
Line: 19, Token: 5 ----> integer
Line: 19, Token: ; ----> separator
Line: 19, Token: i ----> identifier
Line: 19, Token: ) ----> separator
Line: 20, Token: { ----> separator
Line: 21, Token: if ----> Keyword
Line: 21, Token: ( ----> separator
Line: 21, Token: numbers ----> identifier
Line: 21, Token: [ ----> separator
Line: 21, Token: i ----> identifier
Line: 21, Token: ] ----> separator
Line: 21, Token:  <=  ----> operator
Line: 21, Token: 3 ----> integer
Line: 21, Token: ) ----> separator
Line: 22, Token: { ----> separator
Line: 24, Token: continue ----> Keyword
Line: 24, Token: ; ----> separator
Line: 25, Token: } ----> separator
Line: 26, Token: cout ----> Keyword
Line: 26, Token:  <<  ----> operator
Line: 26, Token: numbers ----> identifier
Line: 26, Token: [ ----> separator
Line: 26, Token: i ----> identifier
Line: 26, Token: ] ----> separator
Line: 26, Token:  <<  ----> operator
Line: 26, Token: endl ----> identifier
Line: 26, Token: ; ----> separator
Line: 27, Token: } ----> separator
Line: 29, Token: return ----> Keyword
Line: 29, Token: 0 ----> integer
Line: 29, Token: ; ----> separator
Line: 30, Token: } ----> separator
